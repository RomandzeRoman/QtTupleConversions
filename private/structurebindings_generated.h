////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////// This is an auto generated header. Modify generate_cpp17.py instead.   ////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STRUCTURE_BINDING_GENERATED_HPP
#define STRUCTURE_BINDING_GENERATED_HPP
#pragma once

#include <tuple>
#include <type_traits>

/**
 * @file
 * @brief Contains detail functions for converting struct to std::tuple
 *
 * Contains detail functions for converting struct to std::tuple.
 * This file is auto-generated by generate_cpp17.py
 * @warning Dont use this functions directly!
 */

namespace TupleConversions::Detail {

template <class T>
constexpr auto toTupleImpl(
    T&&, std::integral_constant<std::size_t, 0>
    ) noexcept
{
    return std::make_tuple();
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 1>
    ) noexcept
{
    auto&& [a] = std::forward<T>(val);
    return std::make_tuple(a);
}


template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 2>
    ) noexcept
{
    auto&& [
        a, b
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 3>
    ) noexcept
{
    auto&& [
        a, b, c
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 4>
    ) noexcept
{
    auto&& [
        a, b, c, d
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 5>
    ) noexcept
{
    auto&& [
        a, b, c, d, e
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 6>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 7>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 8>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 9>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 10>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 11>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 12>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 13>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 14>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 15>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 16>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 17>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 18>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 19>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 20>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 21>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 22>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 23>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 24>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 25>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 26>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 27>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 28>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 29>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 30>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 31>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 32>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 33>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 34>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 35>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 36>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 37>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 38>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 39>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 40>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 41>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 42>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 43>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 44>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 45>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 46>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 47>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 48>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 49>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 50>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 51>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 52>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 53>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 54>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 55>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 56>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 57>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 58>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 59>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 60>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 61>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 62>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 63>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 64>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 65>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 66>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 67>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 68>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 69>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 70>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 71>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 72>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 73>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 74>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 75>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 76>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 77>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 78>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 79>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 80>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 81>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 82>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 83>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 84>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 85>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 86>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 87>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 88>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 89>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 90>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 91>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 92>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 93>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb, jc
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb, jc
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 94>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb, jc, jd
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb, jc, jd
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 95>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb, jc, jd, je
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb, jc, jd, je
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 96>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb, jc, jd, je, jf
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb, jc, jd, je, jf
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 97>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb, jc, jd, je, jf, jg
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb, jc, jd, je, jf, jg
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 98>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb, jc, jd, je, jf, jg, jh
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb, jc, jd, je, jf, jg, jh
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 99>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb, jc, jd, je, jf, jg, jh, jj
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb, jc, jd, je, jf, jg, jh, jj
    );
}

template <class T>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, 100>
    ) noexcept
{
    auto&& [
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb, jc, jd, je, jf, jg, jh, jj, jk
    ] = std::forward<T>(val);

    return std::make_tuple(
        a, b, c, d, e, f, g, h, j, k,
        aa, ab, ac, ad, ae, af, ag, ah, aj, ak,
        ba, bb, bc, bd, be, bf, bg, bh, bj, bk,
        ca, cb, cc, cd, ce, cf, cg, ch, cj, ck,
        da, db, dc, dd, de, df, dg, dh, dj, dk,
        ea, eb, ec, ed, ee, ef, eg, eh, ej, ek,
        fa, fb, fc, fd, fe, ff, fg, fh, fj, fk,
        ga, gb, gc, gd, ge, gf, gg, gh, gj, gk,
        ha, hb, hc, hd, he, hf, hg, hh, hj, hk,
        ja, jb, jc, jd, je, jf, jg, jh, jj, jk
    );
}

template <class T, size_t N>
constexpr auto toTupleImpl(
    T&& val, std::integral_constant<std::size_t, N>
    ) noexcept
{
    static_assert(N < 101);
}

} // TupleConversions::Detail

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // STRUCTURE_BINDING_GENERATED_HPP

